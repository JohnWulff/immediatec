#!/bin/bash

########################################################################
#
#	Copyright (C) 2000-2025  John E. Wulff
#
#   You may distribute under the terms of either the GNU General Public
#   License or the Artistic License, as specified in the README file.
#
#   For more information about this program, or for information on how
#   to contact the author, see the README file
#
#	makeAll - helper script for the immediate C make system
#
#	make immcc and libict.a by default
#
#	make immcc, libict.a, libict.so, icr, ict, const or lmain
#	individually with -C -L -S -R -T -N or -M flags
#	when any of these are set, cexe.c is not modified
#
#	use egrep rather than grep -E so it works on older Unix systems
#
########################################################################

usage ()
{
    echo 'Usage:' >&2
    echo " ${0##*/} [-qgpclrtmCLSPGVRTNMuedsyzh][ -D<OPT>][ -W<OPT>][ -o<OBJ>]" >&2
    echo '    call make for immcc, libict.a, libict.so, icr, ict, const and lmain' >&2
    echo '    with correct options' >&2
    echo '	-q	output only headings and error messages' >&2
    echo '	-g	compile for debugging C code and no C optimisation (default -O2)' >&2
    echo '	-p	compile and link for profiling with gprof (-pg)' >&2
    echo '	-c	make immcc iC compiler with YYDEBUG' >&2
    echo '	-l	make libict.a with YYDEBUG -t trace output possible' >&2
    echo '	-r	make icr iC compiler with YYDEBUG -t trace output possible' >&2
    echo '	-t	make ict iC compiler with YYDEBUG -t trace output possible' >&2
    echo '	-m	make lmain test internal C compiler with YYDEBUG' >&2
    echo '	-C	make immcc only; generate an empty cexe.c' >&2
    echo '	-L	make libict.a only' >&2
    echo '	-S	make libict.so without YYDEBUG if OSTYPE ~= linux' >&2
    echo '	-G	make goserver and immag if golang is installed' >&2
    echo '	-P	make iCpiFace real SIO digital I/O for RASPBERRYPI, YYDEBUG only' >&2
    echo '		   + iCgpioPUD for RASPBERRYPI as SUID auxiliary program' >&2
    echo '	-Y	make iCpiGPIO real GPIO digital I/O for RASPBERRYPI, YYDEBUG only' >&2
    echo '		   + iCgpioPUD for RASPBERRYPI as SUID auxiliary program' >&2
    echo '	-X	make iCpiI2C real I2C digital I/O for RASPBERRYPI, YYDEBUG only' >&2
    echo '		   + iCgpioPUD for RASPBERRYPI as SUID auxiliary program' >&2
    echo '	-V	make iCpiPWM real analog I/O for RASPBERRYPI, PWM, serVo and ADC' >&2
    echo '	-R	make icr only without modifying cexe.c' >&2
    echo '	-T	make ict only without modifying cexe.c' >&2
    echo '	-N	make const test internal constant expression compiler only' >&2
    echo '	-M	make lmain only' >&2
    echo '	-D<OPT>	make all targets with <OPT> defined' >&2
    echo '	see usage of immcc, icr, ict and applications for options' >&2
    echo '	-W<OPT>	compile all C sources with -W<OPT> (useful for -Wall)' >&2
    echo '	-u	make any compiler targets with Symbol SYUNION option' >&2
    echo '	-e	make all targets with EFENCE option and link with -lefence' >&2
    echo '	-d	make with DEQ - double ended queues are slightly faster' >&2
    echo '	-s	make with INT_MAX=32767' >&2
    echo '		(on a 16 bit system INT_MAX is 32767 and -s is not required)' >&2
    echo '		simulates compilation for a 16 bit system, which does' >&2
    echo '		no 32 bit arithmetic and rejects QL.. and IL.. I/O unless' >&2
    echo '	-y	make with LONG16' >&2
    echo '		produces code for long int arithmetic on a 16 bit system' >&2
    echo '	-o<OBJ>	define object extension (o is default; obj for Windows)' >&2
    echo '	-z	echo compiler calls with all options for debugging (not -q)' >&2
    echo '	-h	this help text' >&2
    echo '	NOTE: if any option is changed, make clean is automatically executed' >&2
    echo '	$Id: makeAll 1.53 $' >&2
}

makeLib ()
{
    mv load.$O misc.$O scid.$O ict.$O icbegin.$O p_channel.$O icend.$O tcpc.$O link.$O rsff.$O scan.$O rpi_gpio.$O mcp23s17.$O pifacecad.$O Make_tmp 2> /dev/null
    if [ -d LibObjs ]; then
	mv LibObjs/* .
    else
	mkdir LibObjs
    fi
    make OPT="-DLOAD -DTCP$l$d$e$o$s$y" CFLAGS="$cflags" LDFLAGS="$ldflags" libict.a
    mv load.$O misc.$O scid.$O ict.$O icbegin.$O p_channel.$O icend.$O tcpc.$O  link.$O rsff.$O scan.$O LibObjs
    if [[ -n "$raspberrypi" ]]; then
	mv rpi_gpio.$O mcp23s17.$O pifacecad.$O LibObjs
    fi
    mv Make_tmp/* . 2> /dev/null
}

makeShared ()
{
    mv load.$O misc.$O scid.$O ict.$O icbegin.$O p_channel.$O icend.$O tcpc.$O  link.$O rsff.$O scan.$O rpi_gpio.$O mcp23s17.$O pifacecad.$O Make_tmp 2> /dev/null
    if [ -d SharedObjs ]; then
	mv SharedObjs/* .
    else
	mkdir SharedObjs
    fi
    make OPT="-fPIC -DLOAD -DTCP$d$e$o$s$y" CFLAGS="-O2$W" libict.so
    mv load.$O misc.$O scid.$O ict.$O icbegin.$O p_channel.$O icend.$O tcpc.$O  link.$O rsff.$O scan.$O SharedObjs
    if [[ -n "$raspberrypi" ]]; then
	mv rpi_gpio.$O mcp23s17.$O pifacecad.$O SharedObjs
    fi
    mv Make_tmp/* . 2> /dev/null
}

makeGOserver ()
{
    make goserver
    make ./goserver.1.gz
}

makeGOimmag ()
{
    make immag
    make ./immag.1.gz
}

makeIcr ()
{
    mv comp.$O genr.$O gram.$O cons.$O icr.$O icbegin.$O p_channel.$O icend.$O misc.$O init.$O lexc.$O link.$O icc.$O outp.$O rsff.$O scan.$O symb.$O Make_tmp 2> /dev/null
    if [ -d IcrObjs ]; then
	mv IcrObjs/* .
    else
	mkdir IcrObjs
    fi
    make OPT="-DRUN$r$u$d$e$os$s$y" CFLAGS="$cflags" LDFLAGS="$ldflags" icr
    mv comp.$O genr.$O gram.$O cons.$O icr.$O icbegin.$O p_channel.$O icend.$O misc.$O init.$O lexc.$O link.$O icc.$O outp.$O rsff.$O scan.$O symb.$O IcrObjs
    mv Make_tmp/* . 2> /dev/null
}

makeIct ()
{
    mv comp.$O genr.$O gram.$O cons.$O ict.$O icbegin.$O p_channel.$O icend.$O misc.$O init.$O lexc.$O link.$O icc.$O outp.$O rsff.$O scan.$O symb.$O tcpc.$O Make_tmp 2> /dev/null
    if [ -d IctObjs ]; then
	mv IctObjs/* .
    else
	mkdir IctObjs
    fi
    make OPT="-DTCP$t$u$d$e$os$s$y" CFLAGS="$cflags" LDFLAGS="$ldflags" ict
    mv comp.$O genr.$O gram.$O cons.$O ict.$O icbegin.$O p_channel.$O icend.$O misc.$O init.$O lexc.$O link.$O icc.$O outp.$O rsff.$O scan.$O symb.$O tcpc.$O IctObjs
    mv Make_tmp/* . 2> /dev/null
}

makeConst ()
{
    mv cons.$O Make_tmp 2> /dev/null
    if [ -d ConstObjs ]; then
	mv ConstObjs/* .
    else
	mkdir ConstObjs
    fi
    make OPT="-DTESTCONS$m$u$d$e$os$s$y" CFLAGS="$cflags" LDFLAGS="$ldflags" const
    mv cons.$O ConstObjs
    mv Make_tmp/* . 2> /dev/null
}

makeLmain ()
{
    mv misc.$O gram.$O lexc.$O symb.$O Make_tmp 2> /dev/null
    if [ -d LmainObjs ]; then
	mv LmainObjs/* .
    else
	mkdir LmainObjs
    fi
    make OPT="-DLMAIN$m$u$d$e$os$s$y" CFLAGS="$cflags" LDFLAGS="$ldflags" lmain
    mv misc.$O gram.$O lexc.$O symb.$O LmainObjs
    mv Make_tmp/* . 2> /dev/null
}

makePiFace ()
{
    mv misc.$O icend.$O tcpc.$O rpi_gpio.$O mcp23s17.$O pifacecad.$O Make_tmp 2> /dev/null
    if [ -d PiFaceObjs ]; then
	mv PiFaceObjs/* .
    else
	mkdir PiFaceObjs
    fi
    make OPT="-DTCP -DYYDEBUG$o" CFLAGS="$cflags" LDFLAGS="$ldflags" iCpiFace
    mv misc.$O icend.$O tcpc.$O rpi_gpio.$O mcp23s17.$O pifacecad.$O PiFaceObjs
    mv Make_tmp/* . 2> /dev/null
}

makePiGPIO ()
{
    mv misc.$O icend.$O tcpc.$O rpi_gpio.$O mcp23s17.$O pifacecad.$O Make_tmp 2> /dev/null
    if [ -d PiGPIOObjs ]; then
	mv PiGPIOObjs/* .
    else
	mkdir PiGPIOObjs
    fi
    make OPT="-DTCP -DYYDEBUG$o" CFLAGS="$cflags" LDFLAGS="$ldflags" iCpiGPIO
    mv misc.$O icend.$O tcpc.$O rpi_gpio.$O PiGPIOObjs
    mv Make_tmp/* . 2> /dev/null
}

makePiI2C ()
{
    mv misc.$O icend.$O tcpc.$O rpi_gpio.$O Make_tmp 2> /dev/null
    if [ -d PiI2CObjs ]; then
	mv PiI2CObjs/* .
    else
	mkdir PiI2CObjs
    fi
    make OPT="-DTCP -DYYDEBUG$o" CFLAGS="$cflags" LDFLAGS="$ldflags" iCpiI2C
    mv misc.$O icend.$O tcpc.$O rpi_gpio.$O PiI2CObjs
    mv Make_tmp/* . 2> /dev/null
}

makeGpioPUD ()
{
    make OPT="$o" CFLAGS="$cflags" LDFLAGS="$ldflags" iCgpioPUD
}

makePiPWM ()
{
    mv misc.$O icend.$O tcpc.$O rpi_rev.$O Make_tmp 2> /dev/null
    if [ -d PiPWMObjs ]; then
	mv PiPWMObjs/* .
    else
	mkdir PiPWMObjs
    fi
    make OPT="-DPWM -DTCP -DYYDEBUG$o" CFLAGS="$cflags" LDFLAGS="$ldflags" iCpiPWM
    mv misc.$O icend.$O tcpc.$O rpi_rev.$O PiPWMObjs
    mv Make_tmp/* . 2> /dev/null
}

q=""
c=""
l=""
r=""
t=""
m=""
u=""
d=""
e=""
s=""
y=""
C=""
L=""
S=""
G=""
P=""
Y=""
X=""
V=""
R=""
T=""
N=""
M=""
cflags="-O2"			# optimisation, no debugging info
ldflags=""			# no profiling
O="o"
o=""
w=""
z=0
YN=0
Z=""
cpu=""
raspberrypi=""

while getopts ":qgpclrtmCLSPYXGVRTNMuedsyzhD:W:o:" opt; do
    case $opt in
    q )	q="q";;		# echo only - dont kill
    g )	cflags="-g";;	# debugging, no optimisation
    p )	ldflags=" -pg";;	# profiling
    c )	C=1; c="-DYYDEBUG"; YN=1;;
    l )	L=1; l=" -DYYDEBUG"; YN=1;;
    r )	R=1; r=" -DYYDEBUG";;
    t )	T=1; t=" -DYYDEBUG";;
    m )	M=1; m=" -DYYDEBUG";;
    C )	C=1;;
    L )	L=1;;
    S )	S=1;;
    G )	G=1;;
    P )	P=1;;
    Y )	Y=1;;
    X )	X=1;;
    V )	V=1;;
    R )	R=1;;
    T )	T=1;;
    N )	N=1;;
    M )	M=1;;
    u )	u=" -DSYUNION";;
    d )	d=" -DDEQ";;
    e )	e=" -DEFENCE";;
    D ) o="$o -D$OPTARG";;
    W ) W="$W -W$OPTARG";;
    s )	s=" -DINT_MAX=32767";;
    y )	y=" -DLONG16";;
    o ) O="$OPTARG";;
    z )	z=1; q="";;
    h )	usage; exit 255;;
    \?)	echo "$name: illegal option '-$OPTARG'"; usage; exit 127;;
    esac
done
cflags="$cflags$ldflags$W";
shift $(($OPTIND - 1))

if [ -f Make_tmp ]; then
    echo 'Error makeAll: Make_tmp exists as file ??? - nothing made' >&2
    exit 1;
fi
test -d Make_tmp || mkdir Make_tmp;

os="$o"
if [ -x /bin/uname ]; then
    cpu=`/bin/uname -m`
    ########################################################################
    #  cpu = armv6 or amv7	RPi1 to Rpi3
    #  cpu = aarch64		RPi4 and LibreComputer Potato
    #  kernel < 6.6...		use sysfs
    #  kernel >= 6.6...		use GPIO Character Device Userspace API (V2)
    ########################################################################
    for computer in armv aarch; do
	tail=${cpu#"$computer"}
	if [[ "$cpu" != "$tail" ]]; then
	    kernel=`/bin/uname -r`
	    if [[ $kernel =~ ^([0-9]+)\.([0-9]+) ]]; then
		kmajor=${BASH_REMATCH[1]}
		kminor=${BASH_REMATCH[2]}
		kversion=`perl -e "printf \"%d%03d\\n\", $kmajor, $kminor;"`
		o="$o -DRASPBERRYPI=$kversion"
	    else
		o="$o -DRASPBERRYPI"
	    fi
	    raspberrypi="$cpu"
	    break
	fi
    done
fi

if [ $YN -ne 0 ]; then
    Z=" -DYYDEBUG=$YN"
fi
if [ ! -f icg.h ] || ( ( [ -n "$C" ] || [ -n "$L" ] ) && ! perl icg.pl $Z$u$d$e$o$s$y icc.h | cmp -s - icg.h ); then
    echo "Options changed to '$Z$u$d$e$o$s$y'"
    if [ -z "$R" ] && [ -z "$T" ]; then
	echo "   make clean"
	make clean 2>&1 | if [ -n "$q" ]; then egrep -i "(\berror|warning|unrecognized|up to date|:[A-Z_a-z. 0-9]+:)"; else cat; fi
    fi
    echo "   remake icg.h"
    perl icg.pl $Z$u$d$e$o$s$y icc.h > icg.h
fi

if [ -n "$C" ]; then
    echo "make OPT=\"$c$u$d$e$o$s$y\" CFLAGS=\"$cflags\" LDFLAGS=\"$ldflags\" immcc"
    make OPT="$c$u$d$e$o$s$y" CFLAGS="$cflags" LDFLAGS="$ldflags" immcc 2>&1 | if [ -n "$q" ]; then egrep -i "(\berror|warning|unrecognized|up to date|:[A-Z_a-z. 0-9]+:)"; else cat; fi
fi

if [ -n "$L" ]; then		# echo must be before makeLib call - output is redirected - same for others
    echo "make OPT=\"-DLOAD -DTCP$l$d$e$o$s$y\" CFLAGS=\"$cflags\" LDFLAGS=\"$ldflags\" libict.a"
    makeLib  2>&1 | if [ -n "$q" ]; then egrep -i "(\berror|warning|unrecognized|up to date|:[A-Z_a-z. 0-9]+:)"; else cat; fi
fi

if [ -n "$S" ]; then
    if [ "${OSTYPE%-*}" = "linux" ]; then
	echo "make OPT=\"-fPIC -DLOAD -DTCP$d$e$o$s$y\" CFLAGS=\"-O2$W\" libict.so"
	makeShared  2>&1 | if [ -n "$q" ]; then egrep -i "(\berror|warning|unrecognized|up to date|:[A-Z_a-z. 0-9]+:)"; else cat; fi
    else
	echo "ERROR: cannot make shared library libict.so on non linux systems"
    fi
fi

if [ -n "$G" ]; then
    echo "make goserver"
    makeGOserver  2>&1 | if [ -n "$q" ]; then egrep -i "(\berror|warning|unrecognized|up to date|:[A-Z_a-z. 0-9]+:)"; else cat; fi
    echo "make immag"
    makeGOimmag  2>&1 | if [ -n "$q" ]; then egrep -i "(\berror|warning|unrecognized|up to date|:[A-Z_a-z. 0-9]+:)"; else cat; fi
fi

if [ -n "$R" ]; then
    echo "make OPT=\"-DRUN$r$u$d$e$os$s$y\" CFLAGS=\"$cflags\" LDFLAGS=\"$ldflags\" icr"
    makeIcr  2>&1 | if [ -n "$q" ]; then egrep -i "(\berror|warning|unrecognized|up to date|:[A-Z_a-z. 0-9]+:)"; else cat; fi
fi

if [ -n "$T" ]; then
    echo "make OPT=\"-DTCP$t$u$d$e$os$s$y\" CFLAGS=\"$cflags\" LDFLAGS=\"$ldflags\" ict"
    makeIct  2>&1 | if [ -n "$q" ]; then egrep -i "(\berror|warning|unrecognized|up to date|:[A-Z_a-z. 0-9]+:)"; else cat; fi
fi

if [ -n "$N" ]; then
    echo "make OPT=\"-DTESTCONS$m$u$d$e$os$s$y\" CFLAGS=\"$cflags\" LDFLAGS=\"$ldflags\" const"
    makeConst  2>&1 | if [ -n "$q" ]; then egrep -i "(\berror|warning|unrecognized|up to date|:[A-Z_a-z. 0-9]+:)"; else cat; fi
fi

if [ -n "$M" ]; then
    echo "make OPT=\"-DLMAIN$m$u$d$e$os$s$y\" CFLAGS=\"$cflags\" LDFLAGS=\"$ldflags\" lmain"
    makeLmain  2>&1 | if [ -n "$q" ]; then egrep -i "(\berror|warning|unrecognized|up to date|:[A-Z_a-z. 0-9]+:)"; else cat; fi
fi

if [ -n "$P" ]; then
    if [[ -n "$raspberrypi" ]]; then
	echo "make OPT=\"-DTCP -DYYDEBUG$o\" CFLAGS=\"$cflags\" LDFLAGS=\"$ldflags\" iCpiFace"
	makePiFace  2>&1 | if [ -n "$q" ]; then egrep -i "(\berror|warning|unrecognized|up to date|:[A-Z_a-z. 0-9]+:)"; else cat; fi
	if [[ iCgpioPUD -ot iCgpioPUD.c ]]; then
	    echo "make OPT=\"$o\" CFLAGS=\"$cflags\" LDFLAGS=\"$ldflags\" iCgpioPUD"
	    makeGpioPUD  2>&1 | if [ -n "$q" ]; then egrep -i "(\berror|warning|unrecognized|up to date|:[A-Z_a-z. 0-9]+:)"; else cat; fi
	fi
    else
	echo "Error makeAll -P: cannot make iCpiFace for a '$cpu' cpu - only for an 'armv*' on a Raspberry Pi"
    fi
fi

if [ -n "$Y" ]; then
    if [[ -n "$raspberrypi" ]]; then
	echo "make OPT=\"-DTCP -DYYDEBUG$o\" CFLAGS=\"$cflags\" LDFLAGS=\"$ldflags\" iCpiGPIO"
	makePiGPIO  2>&1 | if [ -n "$q" ]; then egrep -i "(\berror|warning|unrecognized|up to date|:[A-Z_a-z. 0-9]+:)"; else cat; fi
	if [[ iCgpioPUD -ot iCgpioPUD.c ]]; then
	    echo "make OPT=\"$o\" CFLAGS=\"$cflags\" LDFLAGS=\"$ldflags\" iCgpioPUD"
	    makeGpioPUD  2>&1 | if [ -n "$q" ]; then egrep -i "(\berror|warning|unrecognized|up to date|:[A-Z_a-z. 0-9]+:)"; else cat; fi
	fi
    else
	echo "Error makeAll -Y: cannot make iCpiGPIO for a '$cpu' cpu - only for an 'armv*' on a Raspberry Pi"
    fi
fi

if [ -n "$V" ]; then
    if [[ -n "$raspberrypi" ]]; then
	echo "make OPT=\"-DPWM -DTCP -DYYDEBUG$o\" CFLAGS=\"$cflags\" LDFLAGS=\"$ldflags\" iCpiPWM"
	makePiPWM  2>&1 | if [ -n "$q" ]; then egrep -i "(\berror|warning|unrecognized|up to date|:[A-Z_a-z. 0-9]+:)"; else cat; fi
    else
	echo "Error makeAll -V: cannot make iCpiPWM for a '$cpu' cpu - only for an 'armv*' on a Raspberry Pi"
    fi
fi

if [ -n "$X" ]; then
    if [[ -n "$raspberrypi" ]]; then
	echo "make OPT=\"-DTCP -DYYDEBUG$o\" CFLAGS=\"$cflags\" LDFLAGS=\"$ldflags\" iCpiI2C"
	makePiI2C  2>&1 | if [ -n "$q" ]; then egrep -i "(\berror|warning|unrecognized|up to date|:[A-Z_a-z. 0-9]+:)"; else cat; fi
	if [[ iCgpioPUD -ot iCgpioPUD.c ]]; then
	    echo "make OPT=\"$o\" CFLAGS=\"$cflags\" LDFLAGS=\"$ldflags\" iCgpioPUD"
	    makeGpioPUD  2>&1 | if [ -n "$q" ]; then egrep -i "(\berror|warning|unrecognized|up to date|:[A-Z_a-z. 0-9]+:)"; else cat; fi
	fi
    else
	echo "Error makeAll -X: cannot make iCpiI2C for a '$cpu' cpu - only for an 'armv*' on a Raspberry Pi"
    fi
fi

rmdir Make_tmp
exit 0

############ POD to generate man page ##################################

=encoding utf8

=head1 NAME

makeAll - supports Makefile in immediate-C develeopment

=head1 SYNOPSIS

 makeAll [-qgpclrtmCLSPGVRTMuedsyzh][ -D<OPT>][ -W<OPT>][ -o<OBJ>]
 call make for immcc, libict.so, libict.a, icr, ict, const and lmain
 with correct options
    -q      output only headings and error messages
    -g      compile for debugging C code and no C optimisation (default -O2)
    -p      compile and link for profiling with gprof (-pg)
    -c      make immcc iC compiler with YYDEBUG
    -l      make libict.a with YYDEBUG -t trace output possible
    -r      make icr iC compiler with YYDEBUG -t trace output possible
    -t      make ict iC compiler with YYDEBUG -t trace output possible
    -m      make lmain test internal C compiler with YYDEBUG
    -C      make immcc only; generate an empty cexe.c
    -L      make libict.a only
    -S      make libict.so without YYDEBUG if OSTYPE ~= linux
    -G      make goserver and immag if golang is installed
    -P      make iCpiFace real SIO digital I/O for RASPBERRYPI, YYDEBUG only
          + iCgpioPUD for RASPBERRYPI as SUID auxiliary program
    -Y      make iCpiGPIO real GPIO digital I/O for RASPBERRYPI, YYDEBUG only
          + iCgpioPUD for RASPBERRYPI as SUID auxiliary program
    -X      make iCpiI2C real I2C digital I/O for RASPBERRYPI, YYDEBUG only
    -V      make iCpiPWM real analog I/O for RASPBERRYPI, PWM, serVo and ADC
    -R      make icr only without modifying cexe.c
    -T      make ict only without modifying cexe.c
    -N      make const test internal constant expression compiler
    -M      make lmain only
    -D<OPT> make all targets with <OPT> defined
            see usage of immcc, icr, ict and applications for options
    -W<OPT> compile all C sources with -W<OPT> (useful for -Wall)
    -u      make any compiler targets with Symbol SYUNION option
    -e      make all targets with EFENCE option and link with -lefence
    -d      make with DEQ - double ended queues are slightly faster
    -s      make with INT_MAX=32767
            (on a 16 bit system INT_MAX is 32767 and -s is not required)
            simulates compilation for a 16 bit system, which does
            no 32 bit arithmetic and rejects QL.. and IL.. I/O unless
    -y      make with LONG16
            produces code for long int arithmetic on a 16 bit system
    -o<OBJ> define object extension (o is default; obj for Windows)
    -z      echo compiler calls with all options for debugging (not -q)
    -h      this help text
    NOTE: if any option is changed, make clean is automatically executed

=head1 DESCRIPTION

B<makeAll> is a shell script to support the Makefile to build various
versions of the immcc compiler. Normally only the 'immcc' compiler
the static library 'libict.a' and the shared library 'libict.so' are
required for production systems.  These 3 files are built with a
simple B<make> call. B<makeAll> called with different options allows
making versions with C debugging output for debugging with B<gdb> or
better still B<ddd>.

'icr' is an early version of the compiler which builds its run-time
structures in memory and interprets these directly after compilation. I/O
is via the terminal and very limited. It was very useful in the early
part of development and will not be developed further.

'ict' is another version of the compiler which builds its run-time
structures in memory and interprets these directly after compilation. I/O
is via TCP/IP and iCserver.

'lmain' is a standalone check for the integrated C-compiler implemented
with gram.y and lexc.l. It test compiles C sources and generates debugging
output and possibly error messages.

B<iCpiFace> is a real I/O client supporting one or more  PiFace controllers
as well as an optional PiFaceCAD attached to a Raspberry Pi. Each PiFace
has an 8 bit input and an 8 bit output. The PiFaceCAD has 8 input buttons
and a 2x16 character text display, which can be modified over the iC network.
'iCpiFace' also supports all available GPIO pins as digital inputs or outputs.
(Only useful for armv6l, armv7l etc processors)

B<iCpiPWM> is an I/O client for iCserver in the immediate C environment
of a Raspberry Pi handling analog output to one or more direct GPIO
pins on the Raspberry Pi either as servo pulses in the range 500
to 2500 microseconds at 20 ms intervals (50 Hz) or as PWM pulses at
different frequencies with a duty cycle in the range 0 to 100.
B<iCpiPWM> also handles analog input from an MCP3008 ADC.

B<iCpiI2C> is an I/O client for iCserver in the immediate C environment
of a Raspberry Pi handling real 16 bit inputs and/or 16 bit outputs for
each MCP23017 controller attached to a Raspberry Pi via 8 multiplexed
I2C busses, or from a number of direct GPIO pins on the Raspberry Pi
or both.

'makeAll' keeps the directories 'LibObjs' 'SharedObjs' 'IcrObjs'
'IctObjs' 'ConstObjs' 'LmainObjs' 'PiFaceObjs' 'PiI2CObjs' to save
object files which differ for different targets.  Thus the following
rules for 'make' are satisfied:

  to make immcc, make with OPT=''
  to make libict.a, remove all objects and make with OPT='-DLOAD -DTCP'
  to make libict.so,  "     "    " and make with OPT='-fPIC -DLOAD -DTCP'
  to make icr,        "     "    " and make with OPT='-DRUN -DYYDEBUG'
  to make ict,        "     "    " and make with OPT='-DTCP'
  to make const,      "     "    " and make with OPT='-DTESTCONS'
  to make lmain,      "     "    " and make with OPT='-DLMAIN -DYYDEBUG'
  to make iCpiFace,   "     "    " and make with OPT='-DRASPBERRYPI -DTCP -DYYDEBUG'
  to make iCpiI2C,    "     "    " and make with OPT='-DRASPBERRYPI -DTCP -DYYDEBUG'

    makeAll       # makes 'immcc' 'libict.a' and 'libict.so'
                  # without YYDEBUG support
    makeAll -trm; # makes the auxiliary compilers with YYDEBUG support

another useful call is:

    makeAll -qgclSPtrm;

which makes all quietly with debugging and YYDEBUG support

=head1 AUTHOR

John E. Wulff

=head1 BUGS

Email bug reports to B<immediateC@gmail.com> with S<L<iC Project>> in
the subject field.

=head1 SEE ALSO

L<immcc(1)>, L<iCserver(1)>

=head1 COPYRIGHT

COPYRIGHT (C) 2000-2012  John E. Wulff

You may distribute under the terms of either the GNU General Public
License or the Artistic License, as specified in the README file.

For more information about this program, or for information on how
to contact the author, see the README file.
